# Social Media Publisher - Multi-Sites & Multi-Comptes

Système multi-agents de publication automatisée de contenus sur réseaux sociaux utilisant LangGraph et Claude LLM.

## 🎯 Objectif

"Créer une fois, diffuser partout" - génération automatisée de contenu adapté pour **plusieurs comptes** sur Twitter, Facebook, LinkedIn et Instagram, **gérés par sites web distincts**.

## 🏢 Architecture Multi-Sites

### Sites Web Supportés
- **StuffGaming.fr** - Contenu gaming spécialisé
- **Gaming.com** - Actualités gaming générales
- **Football.com** - Contenu sportif football

### Comptes par Site (9 comptes total)
Chaque site dispose de **3 comptes** :
- 🐦 **Twitter/X**
- 📘 **Facebook**
- 📸 **Instagram**

### Mapping Site + Plateforme → Compte
```
stuffgaming.fr + instagram → @stuffgaming_insta
gaming.com + twitter → @gaming_twitter
football.com + facebook → @football_fb
```

## 🏗️ Architecture

### Composants principaux
- **API FastAPI** : Point d'entrée et orchestration
- **LangGraph** : Workflow multi-agents
- **Claude LLM** : Génération et formatage de contenu
- **Celery** : Traitement asynchrone (à venir)
- **Modèles Pydantic** : Validation des données

### Workflow
1. **Génération** : Claude génère un contenu de base
2. **Formatage** : Adaptation pour chaque plateforme
3. **Publication** : Diffusion sur les réseaux (simulée)
4. **Résultats** : Consolidation des retours

## 🚀 Installation

### Prérequis
- Python 3.9+
- Clé API Anthropic (Claude)
- Redis (pour Celery, optionnel)

### Configuration

1. **Cloner et installer les dépendances**
```bash
pip install -r requirements.txt
```

2. **Configuration environnement**
```bash
cp .env.example .env
# Éditer .env avec votre clé API Anthropic
```

3. **Variables d'environnement minimales**
```env
ANTHROPIC_API_KEY="your_anthropic_api_key_here"
API_PORT=8090
CELERY_BROKER_URL="redis://localhost:6379/1"  # DB 1 pour éviter conflits
DEBUG=true
```

## 🧪 Tests

### Test de base
```bash
python test_orchestrator.py
```

### Test des fonctionnalités avancées
```bash
python test_advanced_features.py
```

### Test multi-sites et multi-comptes ⭐ NOUVEAU
```bash
python test_multisite_features.py
```

### Démarrage de l'API
```bash
python -m app.main
# Ou avec uvicorn:
uvicorn app.main:app --host 0.0.0.0 --port 8090 --reload
```

### Test validation compte
```bash
curl -X POST "http://localhost:8090/test/validate-account" \
  -d "site_web=stuffgaming.fr&platform=instagram"
```

## 📊 Endpoints API Multi-Sites

### Publication simple avec site web
```bash
curl -X POST "http://localhost:8090/publish" \
  -H "Content-Type: application/json" \
  -d '{
    "texte_source": "Nouveau guide gaming disponible !",
    "site_web": "stuffgaming.fr",
    "plateformes": ["twitter", "instagram", "facebook"],
    "hashtags": ["#gaming", "#guide"]
  }'
```

### Publication avancée avec images
```bash
curl -X POST "http://localhost:8090/publish/advanced" \
  -H "Content-Type: application/json" \
  -d '{
    "texte_source": "Top 5 des meilleurs jeux 2024",
    "site_web": "stuffgaming.fr",
    "platforms_config": [
      {
        "platform": "instagram",
        "content_type": "carousel",
        "nb_slides": 5,
        "hashtags": ["#top5", "#gaming"],
        "images_urls": [
          "https://s3.amazonaws.com/stuffgaming/game1.jpg",
          "https://s3.amazonaws.com/stuffgaming/game2.jpg"
        ]
      }
    ]
  }'
```

### Gestion des comptes
- **GET** `/accounts` - Liste tous les comptes
- **GET** `/accounts/{site_web}` - Comptes d'un site
- **GET** `/accounts/{site_web}/{platform}` - Détails compte spécifique
- **POST** `/test/validate-account` - Valider un compte

### Autres endpoints
- **GET** `/status/{request_id}` - Statut d'une demande
- **GET** `/examples` - Exemples avec sites web
- **POST** `/test/format/advanced` - Test formatage avec compte

## 🎯 Fonctionnalités par plateforme

### Twitter
- ✅ **Posts** ≤ 280 caractères
- ✅ Hashtags et mentions automatiques
- ✅ Ton direct et engageant

### Facebook
- ✅ **Posts** conviviaux
- ✅ Support liens et médias
- ✅ Encouragement à l'interaction

### LinkedIn
- ✅ **Posts** professionnels
- ✅ Contenu B2B optimisé
- ✅ Hashtags sectoriels

### Instagram ⭐ NOUVEAU + IMAGES
- ✅ **Posts** avec légendes accrocheuses + émojis
- ✅ **Stories** courtes (≤50 caractères) avec stickers
- ✅ **Carrousels** multi-slides (2-10 slides) **avec images S3**
- ✅ **Génération auto d'images** si non fournies
- ✅ Hashtags et mentions intelligents

### Gestion des images carrousel
```json
{
  "texte_source": "Top 5 des jeux 2024...",
  "site_web": "stuffgaming.fr",
  "platforms_config": [{
    "platform": "instagram",
    "content_type": "carousel",
    "nb_slides": 5,
    "images_urls": [
      "https://s3.amazonaws.com/stuffgaming/game1.jpg",
      "https://s3.amazonaws.com/stuffgaming/game2.jpg"
    ]
  }]
}
```

**Si pas d'images** → Appel automatique `generate_images()`

### Exemples multi-sites

#### StuffGaming - Contenu Gaming
```json
{
  "texte_source": "Nouveau Call of Duty disponible !",
  "site_web": "stuffgaming.fr",
  "platforms_config": [
    {"platform": "instagram", "content_type": "post"},
    {"platform": "twitter", "content_type": "post"}
  ]
}
```

#### Football.com - Story Instagram
```json
{
  "texte_source": "Mbappé au Real Madrid officiel !",
  "site_web": "football.com",
  "platforms_config": [{
    "platform": "instagram",
    "content_type": "story",
    "lien_sticker": "https://football.com/transfert"
  }]
}
```

## 🔧 Structure du projet

```
app/
├── main.py                 # API FastAPI
├── models/
│   ├── base.py            # Modèles de base
│   └── platforms.py       # Modèles par plateforme
├── orchestrator/
│   └── workflow.py        # LangGraph workflow
├── services/
│   └── llm_service.py     # Service Claude
└── config/
    └── settings.py        # Configuration
```

## 📈 État actuel

### ✅ Nouvellement implémenté (Version 2.0)
- **🏢 Système multi-sites** : 3 sites web (StuffGaming, Gaming, Football)
- **👥 Gestion multi-comptes** : 9 comptes (3 par site)
- **🎯 Paramètre site_web obligatoire** : Identification automatique du compte
- **🖼️ Support images carrousel** : URLs S3 + génération automatique
- **🔍 Validation des comptes** : Vérification existence et statut actif
- **📊 API gestion comptes** : Endpoints dédiés aux comptes
- **🧪 Tests multi-sites** : Validation complète du système

### ✅ Déjà fonctionnel (Version 1.0)
- **Types spécifiques par plateforme** : Instagram story, carousel, etc.
- **API avancée** : `/publish/advanced` avec configurations granulaires
- **Rétrocompatibilité** : Ancien endpoint `/publish` avec site_web
- **Orchestrateur LangGraph** : Workflow multi-agents
- **Génération Claude** : Contenu adapté par plateforme
- **Validation Pydantic** : Modèles complets pour tous types

### 🚧 En cours / À venir
- Agents de publication réels (APIs sociales)
- Intégration Celery pour l'asynchrone
- Base de données persistante avec historique
- Interface web de gestion des comptes
- Monitoring avancé par site/compte

### 🔧 Corrections apportées
- **Port API** : 8090 (configurable)
- **Redis** : DB 1 pour éviter conflits
- **Site web obligatoire** : Toutes les requêtes incluent le site
- **Mapping comptes** : Association automatique site+plateforme→compte
- **Génération images** : Function placeholder pour carrousels

## 🎯 Mapping Comptes Configurés

| Site Web | Instagram | Twitter | Facebook |
|----------|-----------|---------|----------|
| StuffGaming.fr | ✅ @stuffgaming_insta | ✅ @stuffgaming_twitter | ✅ @stuffgaming_fb |
| Gaming.com | ✅ @gaming_insta | ✅ @gaming_twitter | ✅ @gaming_fb |
| Football.com | ✅ @football_insta | ✅ @football_twitter | ✅ @football_fb |

**Total : 9 comptes actifs**

## 🛠️ Prochaines étapes

1. **Agent de publication spécifique** - Implémenter un agent réel (ex: Twitter)
2. **Intégration Celery** - Traitement asynchrone distribué
3. **Tests avancés** - Tests d'intégration avec APIs
4. **Monitoring** - Logs et métriques de performance

## 📝 Notes importantes

- **Publication simulée** : Les publications sont actuellement simulées
- **Stockage mémoire** : Les tâches sont stockées en mémoire (non persistantes)
- **Authentification** : Les tokens API des réseaux sociaux ne sont pas encore utilisés

## 🔑 Sécurité & Configuration

### Variables d'environnement
```env
# Configuration API
API_PORT=8090
CELERY_BROKER_URL="redis://localhost:6379/1"

# LLM
ANTHROPIC_API_KEY="your_key_here"

# Tokens par site (exemple)
STUFFGAMING_INSTAGRAM_TOKEN="token_stuffgaming_ig"
GAMING_TWITTER_TOKEN="token_gaming_tw"
FOOTBALL_FACEBOOK_TOKEN="token_football_fb"
```

### Sécurité multi-comptes
- **Isolation des tokens** : Chaque site a ses propres clés API
- **Validation systématique** : Vérification compte avant publication
- **Logs détaillés** : Traçabilité par site et compte
- **Désactivation sélective** : Comptes activables/désactivables individuellement

## 🛠️ Prochaines étapes

1. **Agent publication Twitter** - Implémentation avec API v2 ✅ Priorité
2. **Interface de gestion** - CRUD comptes via web UI
3. **Base de données** - Historique publications par site/compte
4. **Monitoring** - Métriques performance par compte
5. **Auto-scaling** - Workers Celery distribués

---

**Statut** : Version 2.0 - Système multi-sites et multi-comptes fonctionnel ✅
**Prêt pour** : Intégration vraies APIs réseaux sociaux 🚀
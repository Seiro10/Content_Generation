#!/usr/bin/env python3
"""
Script de test simplifi√© pour le syst√®me de cropping
"""

import os
import sys
import logging
import tempfile
from PIL import Image

# Ajouter le chemin de l'app
sys.path.insert(0, '/app')

# Configuration des logs
logging.basicConfig(level=logging.INFO, format='%(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


def test_basic_imports():
    """Teste les imports de base"""
    try:
        logger.info("üß™ Testing basic imports...")

        # Test PIL
        from PIL import Image
        logger.info("‚úÖ PIL available")

        # Test numpy
        import numpy as np
        logger.info("‚úÖ numpy available")

        # Test OpenCV
        try:
            import cv2
            logger.info("‚úÖ OpenCV available")
        except ImportError:
            logger.warning("‚ö†Ô∏è OpenCV not available")

        return True

    except Exception as e:
        logger.error(f"‚ùå Import test failed: {e}")
        return False


def test_unified_cropper():
    """Teste le cropper unifi√© avec gestion d'erreurs"""
    try:
        logger.info("üß™ Testing unified cropper...")

        # Import du cropper unifi√©
        from app.services.unified_cropper import UnifiedCropper

        # Cr√©er instance
        cropper = UnifiedCropper()
        logger.info("‚úÖ UnifiedCropper instance created")

        # Tester get_status
        status = cropper.get_status()
        logger.info(f"‚úÖ Status: {status['status']}")
        logger.info(f"üìã Methods: {', '.join(status['available_methods'])}")

        # Cr√©er image test
        test_img = Image.new('RGB', (800, 600), color='red')
        test_file = tempfile.NamedTemporaryFile(delete=False, suffix='.jpg')
        test_img.save(test_file.name, 'JPEG')
        test_file.close()
        logger.info("‚úÖ Test image created")

        # Test crop
        cropped_file = cropper.smart_crop(test_file.name, (400, 400))
        logger.info("‚úÖ Crop completed")

        # V√©rifier r√©sultat
        with Image.open(cropped_file) as result:
            if result.size == (400, 400):
                logger.info("‚úÖ Crop dimensions correct")
                success = True
            else:
                logger.error(f"‚ùå Wrong dimensions: {result.size}")
                success = False

        # Nettoyer
        os.unlink(test_file)
        os.unlink(cropped_file)
        logger.info("üßπ Cleanup completed")

        return success

    except Exception as e:
        logger.error(f"‚ùå UnifiedCropper test failed: {e}")
        import traceback
        traceback.print_exc()
        return False


def test_opencv_cropper():
    """Teste le cropper OpenCV"""
    try:
        logger.info("üß™ Testing OpenCV cropper...")

        from app.services.opencv_cropper import OpenCVCropper, test_opencv_availability

        if not test_opencv_availability():
            logger.warning("‚ö†Ô∏è OpenCV not functional, skipping test")
            return True  # Non-critique

        cropper = OpenCVCropper()
        logger.info("‚úÖ OpenCVCropper instance created")

        # Test basique
        test_img = Image.new('RGB', (800, 600), color='blue')
        test_file = tempfile.NamedTemporaryFile(delete=False, suffix='.jpg')
        test_img.save(test_file.name, 'JPEG')
        test_file.close()

        cropped_file = cropper.smart_crop(test_file.name, (300, 300))

        with Image.open(cropped_file) as result:
            success = result.size == (300, 300)

        # Nettoyer
        os.unlink(test_file)
        os.unlink(cropped_file)

        if success:
            logger.info("‚úÖ OpenCV cropper test passed")
        else:
            logger.error("‚ùå OpenCV cropper test failed")

        return success

    except Exception as e:
        logger.error(f"‚ùå OpenCV cropper test error: {e}")
        return False


def test_intelligent_cropper():
    """Teste le cropper intelligent"""
    try:
        logger.info("üß™ Testing intelligent cropper...")

        from app.services.intelligent_cropper import IntelligentCropper

        cropper = IntelligentCropper()
        logger.info("‚úÖ IntelligentCropper instance created")

        capabilities = cropper.get_capabilities()
        logger.info(f"üìã Capabilities: {capabilities}")

        # Test basique
        test_img = Image.new('RGB', (800, 600), color='green')
        test_file = tempfile.NamedTemporaryFile(delete=False, suffix='.jpg')
        test_img.save(test_file.name, 'JPEG')
        test_file.close()

        cropped_file = cropper.smart_crop(test_file.name, (500, 500))

        with Image.open(cropped_file) as result:
            success = result.size == (500, 500)

        # Nettoyer
        os.unlink(test_file)
        os.unlink(cropped_file)

        if success:
            logger.info("‚úÖ Intelligent cropper test passed")
        else:
            logger.error("‚ùå Intelligent cropper test failed")

        return success

    except Exception as e:
        logger.error(f"‚ùå Intelligent cropper test error: {e}")
        return False


def main():
    """Fonction principale"""
    logger.info("üöÄ Starting simplified crop system test...")

    tests = [
        ("Basic Imports", test_basic_imports),
        ("Unified Cropper", test_unified_cropper),
        ("OpenCV Cropper", test_opencv_cropper),
        ("Intelligent Cropper", test_intelligent_cropper),
    ]

    results = []

    for test_name, test_func in tests:
        logger.info(f"\nüß™ Running {test_name}...")
        try:
            result = test_func()
            results.append(result)
            status = "‚úÖ PASS" if result else "‚ùå FAIL"
            logger.info(f"{status} {test_name}")
        except Exception as e:
            logger.error(f"‚ùå {test_name} ERROR: {e}")
            results.append(False)

    # R√©sultats finaux
    passed = sum(results)
    total = len(results)

    logger.info(f"\nüìä Final Results: {passed}/{total} tests passed")

    if passed >= 2:  # Au minimum imports + unified cropper
        logger.info("‚úÖ Crop system operational (minimum requirements met)")
        return True
    else:
        logger.error("‚ùå Crop system failed (critical components not working)")
        return False


if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)
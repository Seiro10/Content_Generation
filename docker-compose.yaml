services:
  # Social Media Publisher API with Intelligent Cropping
  social-media-api:
    build:
      context: .
      dockerfile: Dockerfile
    command: ["api"]
    ports:
      - "8090:8090"
    environment:
      - ENVIRONMENT=production
      - API_PORT=8090
      - DEBUG=false
      # LLM Configuration
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-placeholder_key}
      - CLAUDE_MODEL=${CLAUDE_MODEL:-claude-3-5-sonnet-20241022}
      # Celery Configuration
      - CELERY_BROKER_URL=redis://social-media-redis:6379/1
      - CELERY_RESULT_BACKEND=redis://social-media-redis:6379/1
      - MAX_RETRY_ATTEMPTS=${MAX_RETRY_ATTEMPTS:-3}
      - TASK_TIMEOUT=${TASK_TIMEOUT:-300}
      # SAM (Intelligent Cropping) Configuration
      - SAM_ENABLED=${SAM_ENABLED:-true}
      - SAM_MODEL_TYPE=${SAM_MODEL_TYPE:-vit_b}
      - SAM_CHECKPOINT_PATH=${SAM_CHECKPOINT_PATH:-/app/models/sam_checkpoints/sam_vit_b_01ec64.pth}
      - SAM_DEVICE=${SAM_DEVICE:-cpu}
      - SAM_FALLBACK_TO_OPENCV=${SAM_FALLBACK_TO_OPENCV:-true}
      - CROP_METHOD=${CROP_METHOD:-intelligent}
      - IMAGE_QUALITY=${IMAGE_QUALITY:-90}
      # Social Media Credentials - StuffGaming.fr
      - STUFFGAMING_FR_TWITTER_API_KEY=${STUFFGAMING_FR_TWITTER_API_KEY}
      - STUFFGAMING_FR_TWITTER_API_SECRET=${STUFFGAMING_FR_TWITTER_API_SECRET}
      - STUFFGAMING_FR_TWITTER_ACCESS_TOKEN=${STUFFGAMING_FR_TWITTER_ACCESS_TOKEN}
      - STUFFGAMING_FR_TWITTER_ACCESS_TOKEN_SECRET=${STUFFGAMING_FR_TWITTER_ACCESS_TOKEN_SECRET}
      - STUFFGAMING_FR_TWITTER_BEARER_TOKEN=${STUFFGAMING_FR_TWITTER_BEARER_TOKEN}
      - STUFFGAMING_FR_FACEBOOK_APP_ID=${STUFFGAMING_FR_FACEBOOK_APP_ID}
      - STUFFGAMING_FR_FACEBOOK_APP_SECRET=${STUFFGAMING_FR_FACEBOOK_APP_SECRET}
      - STUFFGAMING_FR_FACEBOOK_ACCESS_TOKEN=${STUFFGAMING_FR_FACEBOOK_ACCESS_TOKEN}
      - STUFFGAMING_FR_FACEBOOK_PAGE_ID=${STUFFGAMING_FR_FACEBOOK_PAGE_ID}
      - STUFFGAMING_FR_INSTAGRAM_ACCESS_TOKEN=${STUFFGAMING_FR_INSTAGRAM_ACCESS_TOKEN}
      - STUFFGAMING_FR_INSTAGRAM_BUSINESS_ACCOUNT_ID=${STUFFGAMING_FR_INSTAGRAM_BUSINESS_ACCOUNT_ID}
      # AWS Configuration
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION:-eu-west-3}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME:-matrix-reloaded-rss-img-bucket}
    volumes:
      - social_media_logs:/app/logs
      - social_media_temp:/app/temp
      - social_media_data:/app/data
      - social_media_output:/app/output
      - sam_checkpoints:/app/models/sam_checkpoints
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8090/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - social-media-network
    depends_on:
      social-media-redis:
        condition: service_healthy

  # Celery Worker for Content Generation
  social-media-worker-content:
    build:
      context: .
      dockerfile: Dockerfile
    command: ["worker-content"]
    environment:
      - ENVIRONMENT=production
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-placeholder_key}
      - CLAUDE_MODEL=${CLAUDE_MODEL:-claude-3-5-sonnet-20241022}
      - CELERY_BROKER_URL=redis://social-media-redis:6379/1
      - CELERY_RESULT_BACKEND=redis://social-media-redis:6379/1
      # Social Media Credentials
      - STUFFGAMING_FR_TWITTER_API_KEY=${STUFFGAMING_FR_TWITTER_API_KEY}
      - STUFFGAMING_FR_TWITTER_API_SECRET=${STUFFGAMING_FR_TWITTER_API_SECRET}
      - STUFFGAMING_FR_TWITTER_ACCESS_TOKEN=${STUFFGAMING_FR_TWITTER_ACCESS_TOKEN}
      - STUFFGAMING_FR_TWITTER_ACCESS_TOKEN_SECRET=${STUFFGAMING_FR_TWITTER_ACCESS_TOKEN_SECRET}
      - STUFFGAMING_FR_TWITTER_BEARER_TOKEN=${STUFFGAMING_FR_TWITTER_BEARER_TOKEN}
      - STUFFGAMING_FR_FACEBOOK_APP_ID=${STUFFGAMING_FR_FACEBOOK_APP_ID}
      - STUFFGAMING_FR_FACEBOOK_APP_SECRET=${STUFFGAMING_FR_FACEBOOK_APP_SECRET}
      - STUFFGAMING_FR_FACEBOOK_ACCESS_TOKEN=${STUFFGAMING_FR_FACEBOOK_ACCESS_TOKEN}
      - STUFFGAMING_FR_FACEBOOK_PAGE_ID=${STUFFGAMING_FR_FACEBOOK_PAGE_ID}
      - STUFFGAMING_FR_INSTAGRAM_ACCESS_TOKEN=${STUFFGAMING_FR_INSTAGRAM_ACCESS_TOKEN}
      - STUFFGAMING_FR_INSTAGRAM_BUSINESS_ACCOUNT_ID=${STUFFGAMING_FR_INSTAGRAM_BUSINESS_ACCOUNT_ID}
      # AWS Configuration
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION:-eu-west-3}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME:-matrix-reloaded-rss-img-bucket}
    volumes:
      - social_media_logs:/app/logs
      - social_media_temp:/app/temp
      - social_media_data:/app/data
    restart: unless-stopped
    networks:
      - social-media-network
    depends_on:
      social-media-redis:
        condition: service_healthy

  # Celery Worker for Content Formatting
  social-media-worker-formatting:
    build:
      context: .
      dockerfile: Dockerfile
    command: ["worker-formatting"]
    environment:
      - ENVIRONMENT=production
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-placeholder_key}
      - CLAUDE_MODEL=${CLAUDE_MODEL:-claude-3-5-sonnet-20241022}
      - CELERY_BROKER_URL=redis://social-media-redis:6379/1
      - CELERY_RESULT_BACKEND=redis://social-media-redis:6379/1
      # AWS Configuration
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION:-eu-west-3}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME:-matrix-reloaded-rss-img-bucket}
    volumes:
      - social_media_logs:/app/logs
      - social_media_temp:/app/temp
      - social_media_data:/app/data
    restart: unless-stopped
    networks:
      - social-media-network
    depends_on:
      social-media-redis:
        condition: service_healthy

  # NEW: Celery Worker for Image Processing with Intelligent Cropping
  social-media-worker-image:
    build:
      context: .
      dockerfile: Dockerfile
    command: ["worker-image"]
    environment:
      - ENVIRONMENT=production
      - CELERY_BROKER_URL=redis://social-media-redis:6379/1
      - CELERY_RESULT_BACKEND=redis://social-media-redis:6379/1
      # SAM Configuration
      - SAM_ENABLED=${SAM_ENABLED:-true}
      - SAM_MODEL_TYPE=${SAM_MODEL_TYPE:-vit_b}
      - SAM_CHECKPOINT_PATH=${SAM_CHECKPOINT_PATH:-/app/models/sam_checkpoints/sam_vit_b_01ec64.pth}
      - SAM_DEVICE=${SAM_DEVICE:-cpu}
      - SAM_FALLBACK_TO_OPENCV=${SAM_FALLBACK_TO_OPENCV:-true}
      - CROP_METHOD=${CROP_METHOD:-intelligent}
      - IMAGE_QUALITY=${IMAGE_QUALITY:-90}
      # AWS Configuration
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION:-eu-west-3}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME:-matrix-reloaded-rss-img-bucket}
    volumes:
      - social_media_logs:/app/logs
      - social_media_temp:/app/temp
      - social_media_data:/app/data
      - sam_checkpoints:/app/models/sam_checkpoints
    restart: unless-stopped
    networks:
      - social-media-network
    depends_on:
      social-media-redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  # Celery Worker for Publishing
  social-media-worker-publishing:
    build:
      context: .
      dockerfile: Dockerfile
    command: ["worker-publishing"]
    environment:
      - ENVIRONMENT=production
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-placeholder_key}
      - CLAUDE_MODEL=${CLAUDE_MODEL:-claude-3-5-sonnet-20241022}
      - CELERY_BROKER_URL=redis://social-media-redis:6379/1
      - CELERY_RESULT_BACKEND=redis://social-media-redis:6379/1
      # SAM Configuration (for unified cropper in publishers)
      - SAM_ENABLED=${SAM_ENABLED:-true}
      - SAM_MODEL_TYPE=${SAM_MODEL_TYPE:-vit_b}
      - SAM_CHECKPOINT_PATH=${SAM_CHECKPOINT_PATH:-/app/models/sam_checkpoints/sam_vit_b_01ec64.pth}
      - SAM_DEVICE=${SAM_DEVICE:-cpu}
      - SAM_FALLBACK_TO_OPENCV=${SAM_FALLBACK_TO_OPENCV:-true}
      - CROP_METHOD=${CROP_METHOD:-intelligent}
      # Social Media Credentials
      - STUFFGAMING_FR_TWITTER_API_KEY=${STUFFGAMING_FR_TWITTER_API_KEY}
      - STUFFGAMING_FR_TWITTER_API_SECRET=${STUFFGAMING_FR_TWITTER_API_SECRET}
      - STUFFGAMING_FR_TWITTER_ACCESS_TOKEN=${STUFFGAMING_FR_TWITTER_ACCESS_TOKEN}
      - STUFFGAMING_FR_TWITTER_ACCESS_TOKEN_SECRET=${STUFFGAMING_FR_TWITTER_ACCESS_TOKEN_SECRET}
      - STUFFGAMING_FR_TWITTER_BEARER_TOKEN=${STUFFGAMING_FR_TWITTER_BEARER_TOKEN}
      - STUFFGAMING_FR_FACEBOOK_APP_ID=${STUFFGAMING_FR_FACEBOOK_APP_ID}
      - STUFFGAMING_FR_FACEBOOK_APP_SECRET=${STUFFGAMING_FR_FACEBOOK_APP_SECRET}
      - STUFFGAMING_FR_FACEBOOK_ACCESS_TOKEN=${STUFFGAMING_FR_FACEBOOK_ACCESS_TOKEN}
      - STUFFGAMING_FR_FACEBOOK_PAGE_ID=${STUFFGAMING_FR_FACEBOOK_PAGE_ID}
      - STUFFGAMING_FR_INSTAGRAM_ACCESS_TOKEN=${STUFFGAMING_FR_INSTAGRAM_ACCESS_TOKEN}
      - STUFFGAMING_FR_INSTAGRAM_BUSINESS_ACCOUNT_ID=${STUFFGAMING_FR_INSTAGRAM_BUSINESS_ACCOUNT_ID}
      # AWS Configuration
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION:-eu-west-3}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME:-matrix-reloaded-rss-img-bucket}
    volumes:
      - social_media_logs:/app/logs
      - social_media_temp:/app/temp
      - social_media_data:/app/data
      - sam_checkpoints:/app/models/sam_checkpoints
    restart: unless-stopped
    networks:
      - social-media-network
    depends_on:
      social-media-redis:
        condition: service_healthy

  # Celery Beat Scheduler
  social-media-beat:
    build:
      context: .
      dockerfile: Dockerfile
    command: ["beat"]
    environment:
      - ENVIRONMENT=production
      - CELERY_BROKER_URL=redis://social-media-redis:6379/1
      - CELERY_RESULT_BACKEND=redis://social-media-redis:6379/1
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-placeholder_key}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION:-eu-west-3}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME:-matrix-reloaded-rss-img-bucket}
    volumes:
      - social_media_logs:/app/logs
      - social_media_temp:/app/temp
    restart: unless-stopped
    networks:
      - social-media-network
    depends_on:
      social-media-redis:
        condition: service_healthy

  # Flower Monitoring
  social-media-flower:
    image: mher/flower:2.0.1
    ports:
      - "5555:5555"
    environment:
      - CELERY_BROKER_URL=redis://social-media-redis:6379/1
    command: >
      celery 
      --broker=redis://social-media-redis:6379/1 
      flower 
      --port=5555 
      --basic-auth-force=true 
      --basic-auth=admin:admin
      --auto-refresh=false
    restart: unless-stopped
    networks:
      - social-media-network
    depends_on:
      social-media-redis:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "wget", "--quiet", "--tries=1", "--spider", "http://admin:admin@localhost:5555" ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for Celery
  social-media-redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --maxmemory 1gb --maxmemory-policy allkeys-lru
    environment:
      - REDIS_MAXMEMORY=1gb
      - REDIS_MAXMEMORY_POLICY=allkeys-lru
    networks:
      - social-media-network
    volumes:
      - social_media_redis_data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # PostgreSQL Database
  social-media-db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-social_media_publisher}
      - POSTGRES_USER=${POSTGRES_USER:-social_media_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-social_media_password}
    volumes:
      - social_media_db_data:/var/lib/postgresql/data
    networks:
      - social-media-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-social_media_user} -d ${POSTGRES_DB:-social_media_publisher}" ]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Optional: SAM Checkpoint Downloader (run once)
  sam-downloader:
    build:
      context: .
      dockerfile: Dockerfile
    command: ["test-crop"]
    environment:
      - SAM_ENABLED=${SAM_ENABLED:-true}
      - SAM_MODEL_TYPE=${SAM_MODEL_TYPE:-vit_b}
    volumes:
      - sam_checkpoints:/app/models/sam_checkpoints
    networks:
      - social-media-network
    profiles:
      - setup
    restart: "no"

volumes:
  social_media_logs:
    driver: local
  social_media_temp:
    driver: local
  social_media_data:
    driver: local
  social_media_output:
    driver: local
  social_media_redis_data:
    driver: local
  social_media_db_data:
    driver: local
  sam_checkpoints:
    driver: local

networks:
  social-media-network:
    driver: bridge
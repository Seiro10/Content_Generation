import asyncio
import logging
import sys
import os
from typing import Dict, Any

# Setup logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


async def test_crop_system():
    """Test complet du syst√®me de crop intelligent"""

    print("üéØ Test du Syst√®me de Crop Intelligent")
    print("=" * 50)

    # Test 1: V√©rifier les imports
    print("\n1Ô∏è‚É£ Test des imports...")
    try:
        # Test import OpenCV
        import cv2
        print(f"‚úÖ OpenCV: {cv2.__version__}")

        # Test import numpy
        import numpy as np
        print(f"‚úÖ NumPy: {np.__version__}")

        # Test import Pillow
        from PIL import Image
        print(f"‚úÖ Pillow: {Image.__version__}")

        # Test import SAM (optionnel)
        try:
            from segment_anything import sam_model_registry, SamAutomaticMaskGenerator
            print("‚úÖ SAM: Disponible")
            sam_available = True
        except ImportError:
            print("‚ö†Ô∏è SAM: Non disponible (fallback OpenCV)")
            sam_available = False

    except ImportError as e:
        print(f"‚ùå Erreur import: {e}")
        return False

    # Test 2: Initialiser les services
    print("\n2Ô∏è‚É£ Test d'initialisation des services...")
    try:
        # Test service unifi√©
        from app.services.unified_cropper import unified_cropper
        status = unified_cropper.get_status()
        print(f"‚úÖ Service unifi√© initialis√©")
        print(f"   - M√©thode choisie: {status['unified_cropper']['chosen_method']}")
        print(f"   - SAM disponible: {status['unified_cropper']['intelligent_cropper_available']}")
        print(f"   - OpenCV disponible: {status['unified_cropper']['opencv_cropper_available']}")

        # Test m√©thodes disponibles
        methods = unified_cropper.get_available_methods()
        print("\nüìã M√©thodes disponibles:")
        for method, info in methods.items():
            status_icon = "‚úÖ" if info['available'] else "‚ùå"
            print(f"   {status_icon} {method}: {info['description']} (qualit√©: {info['quality']})")

    except Exception as e:
        print(f"‚ùå Erreur initialisation: {e}")
        return False

    # Test 3: Test des dimensions optimales
    print("\n3Ô∏è‚É£ Test des dimensions optimales...")
    try:
        from app.models.base import PlatformType, ContentType

        test_cases = [
            (PlatformType.INSTAGRAM, ContentType.POST),
            (PlatformType.INSTAGRAM, ContentType.STORY),
            (PlatformType.INSTAGRAM, ContentType.CAROUSEL),
            (PlatformType.TWITTER, ContentType.POST),
            (PlatformType.FACEBOOK, ContentType.POST),
        ]

        for platform, content_type in test_cases:
            dims = unified_cropper.get_optimal_dimensions(platform, content_type)
            print(f"   üìê {platform.value} {content_type.value}: {dims[0]}x{dims[1]}")

    except Exception as e:
        print(f"‚ùå Erreur dimensions: {e}")
        return False

    # Test 4: Test de crop avec image factice
    print("\n4Ô∏è‚É£ Test de crop avec image factice...")
    try:
        # Cr√©er une image de test
        test_image = np.zeros((1080, 1920, 3), dtype=np.uint8)

        # Ajouter un "visage" factice (rectangle blanc)
        cv2.rectangle(test_image, (800, 400), (1000, 600), (255, 255, 255), -1)

        # Tester la d√©tection OpenCV directement
        from app.services.opencv_cropper import opencv_only_cropper

        # Simuler la d√©tection
        fake_regions = opencv_only_cropper._opencv_detect_regions(test_image)
        print(f"‚úÖ D√©tection test: {len(fake_regions)} r√©gions d√©tect√©es")

        # Test de crop factice
        cropped = opencv_only_cropper._smart_crop_opencv(
            test_image, fake_regions, 1080, 1080
        )
        print(f"‚úÖ Crop test r√©ussi: {cropped.shape}")

    except Exception as e:
        print(f"‚ùå Erreur crop test: {e}")
        # Pas critique, continuer

    # Test 5: Test de configuration
    print("\n5Ô∏è‚É£ Test de configuration...")
    try:
        from app.config.settings import settings

        print(f"   üîß SAM activ√©: {settings.sam_enabled}")
        print(f"   üîß Mod√®le SAM: {settings.sam_model_type}")
        print(f"   üîß Device SAM: {settings.sam_device}")
        print(f"   üîß M√©thode crop: {settings.crop_method}")
        print(f"   üîß Fallback OpenCV: {settings.sam_fallback_to_opencv}")

        # V√©rifier checkpoint SAM si configur√©
        if settings.sam_checkpoint_path:
            if os.path.exists(settings.sam_checkpoint_path):
                print(f"   ‚úÖ Checkpoint SAM trouv√©: {settings.sam_checkpoint_path}")
            else:
                print(f"   ‚ö†Ô∏è Checkpoint SAM manquant: {settings.sam_checkpoint_path}")
        else:
            print(f"   ‚ÑπÔ∏è Checkpoint SAM non configur√© (utilise /app/models/sam_checkpoints/)")

    except Exception as e:
        print(f"‚ùå Erreur configuration: {e}")
        return False

    # Test 6: Test endpoints API (si serveur actif)
    print("\n6Ô∏è‚É£ Test des endpoints API...")
    try:
        import requests
        base_url = "http://localhost:8090"

        # Test statut crop
        response = requests.get(f"{base_url}/crop/status", timeout=5)
        if response.status_code == 200:
            print("‚úÖ Endpoint /crop/status accessible")
        else:
            print(f"‚ö†Ô∏è Endpoint /crop/status: status {response.status_code}")

        # Test recommandations
        response = requests.get(f"{base_url}/crop/recommendations", timeout=5)
        if response.status_code == 200:
            print("‚úÖ Endpoint /crop/recommendations accessible")
        else:
            print(f"‚ö†Ô∏è Endpoint /crop/recommendations: status {response.status_code}")

    except requests.exceptions.RequestException:
        print("‚ÑπÔ∏è Serveur API non accessible (normal si pas d√©marr√©)")
    except Exception as e:
        print(f"‚ö†Ô∏è Erreur test API: {e}")

    # Test 7: Test de performance basique
    print("\n7Ô∏è‚É£ Test de performance...")
    try:
        import time

        # Cr√©er image de test plus grande
        large_image = np.random.randint(0, 255, (2160, 3840, 3), dtype=np.uint8)

        # Test OpenCV cropper
        start_time = time.time()
        regions = opencv_only_cropper._opencv_detect_regions(large_image)
        cropped = opencv_only_cropper._smart_crop_opencv(large_image, regions, 1080, 1080)
        opencv_time = time.time() - start_time

        print(f"   ‚è±Ô∏è OpenCV crop (4K‚Üí1080p): {opencv_time:.2f}s")
        print(f"   üìä R√©gions d√©tect√©es: {len(regions)}")

        if opencv_time < 5.0:
            print("   ‚úÖ Performance acceptable")
        else:
            print("   ‚ö†Ô∏è Performance lente (>5s)")

    except Exception as e:
        print(f"‚ùå Erreur test performance: {e}")

    # Test 8: R√©sum√© final
    print("\nüéØ R√âSUM√â DU TEST")
    print("=" * 50)

    try:
        status = unified_cropper.get_status()
        methods = unified_cropper.get_available_methods()

        print(f"‚úÖ Syst√®me de crop intelligent: OP√âRATIONNEL")
        print(f"üìä M√©thode active: {status['unified_cropper']['chosen_method']}")

        available_count = sum(1 for m in methods.values() if m['available'])
        print(f"üîß M√©thodes disponibles: {available_count}/3")

        if status['unified_cropper']['intelligent_cropper_available']:
            print("ü§ñ SAM + OpenCV: Disponible (qualit√© maximale)")
        elif status['unified_cropper']['opencv_cropper_available']:
            print("üîß OpenCV seul: Disponible (qualit√© bonne)")
        else:
            print("üìê Redimensionnement simple: Disponible (qualit√© basique)")

        print("\nüí° Prochaines √©tapes:")
        print("1. D√©marrer le serveur: uvicorn app.main:app --host 0.0.0.0 --port 8090")
        print("2. D√©marrer Celery: celery -A app.services.celery_app worker -l info")
        print("3. Tester avec: curl -X POST 'http://localhost:8090/images/unified-crop' ...")

        if not status['unified_cropper']['intelligent_cropper_available']:
            print("\nüîß Pour activer SAM:")
            print("1. pip install git+https://github.com/facebookresearch/segment-anything.git")
            print(
                "2. T√©l√©charger checkpoint: wget https://dl.fbaipublicfiles.com/segment_anything/sam_vit_b_01ec64.pth")
            print("3. Configurer le chemin dans settings.py")

        return True

    except Exception as e:
        print(f"‚ùå Erreur r√©sum√©: {e}")
        return False


async def test_specific_image(s3_url: str):
    """Test avec une image S3 sp√©cifique"""
    print(f"\nüñºÔ∏è Test avec image sp√©cifique: {s3_url}")

    try:
        from app.services.unified_cropper import unified_cropper
        from app.models.base import PlatformType, ContentType

        # Test crop pour Instagram
        print("üì± Test crop Instagram...")
        result = unified_cropper.crop_image_from_s3(
            s3_url,
            PlatformType.INSTAGRAM,
            ContentType.POST
        )
        print(f"‚úÖ R√©sultat: {result}")

        return True

    except Exception as e:
        print(f"‚ùå Erreur test image: {e}")
        return False


if __name__ == "__main__":
    print("üéØ D√©marrage des tests du syst√®me de crop intelligent...")

    # Test principal
    success = asyncio.run(test_crop_system())

    # Test avec image sp√©cifique si fournie en argument
    if len(sys.argv) > 1:
        s3_url = sys.argv[1]
        success &= asyncio.run(test_specific_image(s3_url))

    if success:
        print("\nüéâ TOUS LES TESTS R√âUSSIS !")
        print("Le syst√®me de crop intelligent est pr√™t √† √™tre utilis√©.")
        sys.exit(0)
    else:
        print("\n‚ùå CERTAINS TESTS ONT √âCHOU√â")
        print("V√©rifiez les logs ci-dessus pour r√©soudre les probl√®mes.")
        sys.exit(1)

# Usage:
# python test_crop_system.py
# python test_crop_system.py s3://bucket/test-image.jpg